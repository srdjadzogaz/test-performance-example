{"{\"assumptions\":{},\"sourceRoot\":\"/Users/srdjadzogaz/Repos/test-wdio/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/srdjadzogaz/Repos/test-wdio\",\"filename\":\"/Users/srdjadzogaz/Repos/test-wdio/wdio.conf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/srdjadzogaz/Repos/test-wdio\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.8:test":{"value":{"code":"\"use strict\";\n\nexports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  // WebdriverIO supports running e2e tests as well as unit and component tests.\n  runner: \"local\",\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // of the configuration file being run.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: [\"./tests/**\"],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [{\n    browserName: \"chrome\",\n    \"goog:chromeOptions\": {\n      args: [\"headless\", \"disable-gpu\"]\n    }\n  }],\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: \"info\",\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: \"http://www.google.com\",\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n\n  services: [\"devtools\"],\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: \"mocha\",\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: [\"spec\"],\n  //\n  // Options to be passed to Mocha.\n  // See the full list at http://mochajs.org/\n  mochaOpts: {\n    ui: \"bdd\",\n    timeout: 60000\n  }\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {object} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {number} exitCode 0 - success, 1 - fail\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {string} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Hook that gets executed before the suite starts\n   * @param {object} suite suite details\n   */\n  // beforeSuite: function (suite) {\n  // },\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n   * beforeEach in Mocha)\n   */\n  // beforeHook: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n   * afterEach in Mocha)\n   */\n  // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n  // },\n  /**\n   * Function to be executed after a test (in Mocha/Jasmine only)\n   * @param {object}  test             test object\n   * @param {object}  context          scope object the test was executed with\n   * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n   * @param {*}       result.result    return object of test function\n   * @param {number}  result.duration  duration of test\n   * @param {boolean} result.passed    true if test has passed, otherwise false\n   * @param {object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n   */\n  // afterTest: function(test, context, { error, result, duration, passed, retries }) {\n  // },\n\n  /**\n   * Hook that gets executed after the suite has ended\n   * @param {object} suite suite details\n   */\n  // afterSuite: function (suite) {\n  // },\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {number} result 0 - command success, 1 - command error\n   * @param {object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {object} exitCode 0 - success, 1 - fail\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n   * Gets executed when a refresh happens.\n   * @param {string} oldSessionId session ID of the old session\n   * @param {string} newSessionId session ID of the new session\n   */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["exports","config","runner","specs","exclude","maxInstances","capabilities","browserName","args","logLevel","bail","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","services","framework","reporters","mochaOpts","ui","timeout"],"sourceRoot":"/Users/srdjadzogaz/Repos/test-wdio/","sources":["wdio.conf.js"],"sourcesContent":["exports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  // WebdriverIO supports running e2e tests as well as unit and component tests.\n  runner: \"local\",\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // of the configuration file being run.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: [\"./tests/**\"],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [\n    {\n      browserName: \"chrome\",\n      \"goog:chromeOptions\": {\n        args: [\"headless\", \"disable-gpu\"],\n      },\n    },\n  ],\n\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: \"info\",\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: \"http://www.google.com\",\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n\n  services: [\"devtools\"],\n\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: \"mocha\",\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: [\"spec\"],\n\n  //\n  // Options to be passed to Mocha.\n  // See the full list at http://mochajs.org/\n  mochaOpts: {\n    ui: \"bdd\",\n    timeout: 60000,\n  },\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {object} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {number} exitCode 0 - success, 1 - fail\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {string} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Hook that gets executed before the suite starts\n   * @param {object} suite suite details\n   */\n  // beforeSuite: function (suite) {\n  // },\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n   * beforeEach in Mocha)\n   */\n  // beforeHook: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n   * afterEach in Mocha)\n   */\n  // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n  // },\n  /**\n   * Function to be executed after a test (in Mocha/Jasmine only)\n   * @param {object}  test             test object\n   * @param {object}  context          scope object the test was executed with\n   * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n   * @param {*}       result.result    return object of test function\n   * @param {number}  result.duration  duration of test\n   * @param {boolean} result.passed    true if test has passed, otherwise false\n   * @param {object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n   */\n  // afterTest: function(test, context, { error, result, duration, passed, retries }) {\n  // },\n\n  /**\n   * Hook that gets executed after the suite has ended\n   * @param {object} suite suite details\n   */\n  // afterSuite: function (suite) {\n  // },\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {number} result 0 - command success, 1 - command error\n   * @param {object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {object} exitCode 0 - success, 1 - fail\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n   * Gets executed when a refresh happens.\n   * @param {string} oldSessionId session ID of the old session\n   * @param {string} newSessionId session ID of the new session\n   */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n};\n"],"mappings":";;AAAAA,OAAO,CAACC,MAAM,GAAG;EACf;EACA;EACA;EACA;EACA;EACAC,MAAM,EAAE,OAAO;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,KAAK,EAAE,CAAC,YAAY,CAAC;EACrB;EACAC,OAAO,EAAE;IACP;EAAA,CACD;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,EAAE;EAChB;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,CACZ;IACEC,WAAW,EAAE,QAAQ;IACrB,oBAAoB,EAAE;MACpBC,IAAI,EAAE,CAAC,UAAU,EAAE,aAAa;IAClC;EACF,CAAC,CACF;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,QAAQ,EAAE,MAAM;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAI,EAAE,CAAC;EACP;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE,uBAAuB;EAChC;EACA;EACAC,cAAc,EAAE,KAAK;EACrB;EACA;EACA;EACAC,sBAAsB,EAAE,MAAM;EAC9B;EACA;EACAC,oBAAoB,EAAE,CAAC;EACvB;EACA;EACA;EACA;EACA;;EAEAC,QAAQ,EAAE,CAAC,UAAU,CAAC;EAEtB;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,OAAO;EAClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,CAAC,MAAM,CAAC;EAEnB;EACA;EACA;EACAC,SAAS,EAAE;IACTC,EAAE,EAAE,KAAK;IACTC,OAAO,EAAE;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;EACE;EACA;EACA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;;EAEA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;EACE;EACA;AACF,CAAC"}},"mtime":1695725962636},"{\"assumptions\":{},\"sourceRoot\":\"/Users/srdjadzogaz/Repos/test-wdio/tests/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/srdjadzogaz/Repos/test-wdio\",\"filename\":\"/Users/srdjadzogaz/Repos/test-wdio/tests/perfTest.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/srdjadzogaz/Repos/test-wdio\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.8:test":{"value":{"code":"\"use strict\";\n\nconst {\n  default: expect\n} = require(\"expect\");\ndescribe(\"Open devtools\", () => {\n  it(\"should load within performance budget\", async () => {\n    /**\n     * this page load will take a bit longer as the DevTools service will\n     * capture all metrics in the background\n     */\n    await browser.enablePerformanceAudits();\n    await browser.url(\"http://www.google.com\");\n    let metrics = await browser.getMetrics();\n    expect(metrics.speedIndex).toBeLessThan(1900); // check that speedIndex is below 1.9 secon\n\n    let score = await browser.getPerformanceScore(); // get Lighthouse Performance score\n    expect(score).toBeGreaterThanOrEqual(0.9); // Lighthouse Performance score is at 90% or higher\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0IiwiZXhwZWN0IiwicmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJicm93c2VyIiwiZW5hYmxlUGVyZm9ybWFuY2VBdWRpdHMiLCJ1cmwiLCJtZXRyaWNzIiwiZ2V0TWV0cmljcyIsInNwZWVkSW5kZXgiLCJ0b0JlTGVzc1RoYW4iLCJzY29yZSIsImdldFBlcmZvcm1hbmNlU2NvcmUiLCJ0b0JlR3JlYXRlclRoYW5PckVxdWFsIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvc3JkamFkem9nYXovUmVwb3MvdGVzdC13ZGlvL3Rlc3RzLyIsInNvdXJjZXMiOlsicGVyZlRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBkZWZhdWx0OiBleHBlY3QgfSA9IHJlcXVpcmUoXCJleHBlY3RcIik7XG5cbmRlc2NyaWJlKFwiT3BlbiBkZXZ0b29sc1wiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIGxvYWQgd2l0aGluIHBlcmZvcm1hbmNlIGJ1ZGdldFwiLCBhc3luYyAoKSA9PiB7XG4gICAgLyoqXG4gICAgICogdGhpcyBwYWdlIGxvYWQgd2lsbCB0YWtlIGEgYml0IGxvbmdlciBhcyB0aGUgRGV2VG9vbHMgc2VydmljZSB3aWxsXG4gICAgICogY2FwdHVyZSBhbGwgbWV0cmljcyBpbiB0aGUgYmFja2dyb3VuZFxuICAgICAqL1xuICAgIGF3YWl0IGJyb3dzZXIuZW5hYmxlUGVyZm9ybWFuY2VBdWRpdHMoKTtcbiAgICBhd2FpdCBicm93c2VyLnVybChcImh0dHA6Ly93d3cuZ29vZ2xlLmNvbVwiKTtcblxuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgYnJvd3Nlci5nZXRNZXRyaWNzKCk7XG4gICAgZXhwZWN0KG1ldHJpY3Muc3BlZWRJbmRleCkudG9CZUxlc3NUaGFuKDE5MDApOyAvLyBjaGVjayB0aGF0IHNwZWVkSW5kZXggaXMgYmVsb3cgMS45IHNlY29uXG5cbiAgICBsZXQgc2NvcmUgPSBhd2FpdCBicm93c2VyLmdldFBlcmZvcm1hbmNlU2NvcmUoKTsgLy8gZ2V0IExpZ2h0aG91c2UgUGVyZm9ybWFuY2Ugc2NvcmVcbiAgICBleHBlY3Qoc2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMC45KTsgLy8gTGlnaHRob3VzZSBQZXJmb3JtYW5jZSBzY29yZSBpcyBhdCA5MCUgb3IgaGlnaGVyXG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTTtFQUFFQSxPQUFPLEVBQUVDO0FBQU8sQ0FBQyxHQUFHQyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBRTdDQyxRQUFRLENBQUMsZUFBZSxFQUFFLE1BQU07RUFDOUJDLEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxZQUFZO0lBQ3REO0FBQ0o7QUFDQTtBQUNBO0lBQ0ksTUFBTUMsT0FBTyxDQUFDQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU1ELE9BQU8sQ0FBQ0UsR0FBRyxDQUFDLHVCQUF1QixDQUFDO0lBRTFDLElBQUlDLE9BQU8sR0FBRyxNQUFNSCxPQUFPLENBQUNJLFVBQVUsQ0FBQyxDQUFDO0lBQ3hDUixNQUFNLENBQUNPLE9BQU8sQ0FBQ0UsVUFBVSxDQUFDLENBQUNDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOztJQUUvQyxJQUFJQyxLQUFLLEdBQUcsTUFBTVAsT0FBTyxDQUFDUSxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRFosTUFBTSxDQUFDVyxLQUFLLENBQUMsQ0FBQ0Usc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUM3QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==","map":{"version":3,"names":["default","expect","require","describe","it","browser","enablePerformanceAudits","url","metrics","getMetrics","speedIndex","toBeLessThan","score","getPerformanceScore","toBeGreaterThanOrEqual"],"sourceRoot":"/Users/srdjadzogaz/Repos/test-wdio/tests/","sources":["perfTest.js"],"sourcesContent":["const { default: expect } = require(\"expect\");\n\ndescribe(\"Open devtools\", () => {\n  it(\"should load within performance budget\", async () => {\n    /**\n     * this page load will take a bit longer as the DevTools service will\n     * capture all metrics in the background\n     */\n    await browser.enablePerformanceAudits();\n    await browser.url(\"http://www.google.com\");\n\n    let metrics = await browser.getMetrics();\n    expect(metrics.speedIndex).toBeLessThan(1900); // check that speedIndex is below 1.9 secon\n\n    let score = await browser.getPerformanceScore(); // get Lighthouse Performance score\n    expect(score).toBeGreaterThanOrEqual(0.9); // Lighthouse Performance score is at 90% or higher\n  });\n});\n"],"mappings":";;AAAA,MAAM;EAAEA,OAAO,EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7CC,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9BC,EAAE,CAAC,uCAAuC,EAAE,YAAY;IACtD;AACJ;AACA;AACA;IACI,MAAMC,OAAO,CAACC,uBAAuB,CAAC,CAAC;IACvC,MAAMD,OAAO,CAACE,GAAG,CAAC,uBAAuB,CAAC;IAE1C,IAAIC,OAAO,GAAG,MAAMH,OAAO,CAACI,UAAU,CAAC,CAAC;IACxCR,MAAM,CAACO,OAAO,CAACE,UAAU,CAAC,CAACC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE/C,IAAIC,KAAK,GAAG,MAAMP,OAAO,CAACQ,mBAAmB,CAAC,CAAC,CAAC,CAAC;IACjDZ,MAAM,CAACW,KAAK,CAAC,CAACE,sBAAsB,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC;AACJ,CAAC,CAAC"}},"mtime":1695725882916},"{\"assumptions\":{},\"sourceRoot\":\"/Users/srdjadzogaz/Repos/test-performance-example/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/srdjadzogaz/Repos/test-performance-example\",\"filename\":\"/Users/srdjadzogaz/Repos/test-performance-example/wdio.conf.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/srdjadzogaz/Repos/test-performance-example\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.8:test":{"value":{"code":"\"use strict\";\n\nexports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  // WebdriverIO supports running e2e tests as well as unit and component tests.\n  runner: \"local\",\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // of the configuration file being run.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: [\"./tests/**\"],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [{\n    browserName: \"chrome\",\n    \"goog:chromeOptions\": {\n      args: [\"headless\", \"disable-gpu\"]\n    }\n  }],\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: \"info\",\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: \"http://www.google.com\",\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n\n  services: [\"devtools\"],\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: \"mocha\",\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: [\"spec\"],\n  //\n  // Options to be passed to Mocha.\n  // See the full list at http://mochajs.org/\n  mochaOpts: {\n    ui: \"bdd\",\n    timeout: 60000\n  }\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {object} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {number} exitCode 0 - success, 1 - fail\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {string} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Hook that gets executed before the suite starts\n   * @param {object} suite suite details\n   */\n  // beforeSuite: function (suite) {\n  // },\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n   * beforeEach in Mocha)\n   */\n  // beforeHook: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n   * afterEach in Mocha)\n   */\n  // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n  // },\n  /**\n   * Function to be executed after a test (in Mocha/Jasmine only)\n   * @param {object}  test             test object\n   * @param {object}  context          scope object the test was executed with\n   * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n   * @param {*}       result.result    return object of test function\n   * @param {number}  result.duration  duration of test\n   * @param {boolean} result.passed    true if test has passed, otherwise false\n   * @param {object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n   */\n  // afterTest: function(test, context, { error, result, duration, passed, retries }) {\n  // },\n\n  /**\n   * Hook that gets executed after the suite has ended\n   * @param {object} suite suite details\n   */\n  // afterSuite: function (suite) {\n  // },\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {number} result 0 - command success, 1 - command error\n   * @param {object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {object} exitCode 0 - success, 1 - fail\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n   * Gets executed when a refresh happens.\n   * @param {string} oldSessionId session ID of the old session\n   * @param {string} newSessionId session ID of the new session\n   */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["exports","config","runner","specs","exclude","maxInstances","capabilities","browserName","args","logLevel","bail","baseUrl","waitforTimeout","connectionRetryTimeout","connectionRetryCount","services","framework","reporters","mochaOpts","ui","timeout"],"sourceRoot":"/Users/srdjadzogaz/Repos/test-performance-example/","sources":["wdio.conf.js"],"sourcesContent":["exports.config = {\n  //\n  // ====================\n  // Runner Configuration\n  // ====================\n  // WebdriverIO supports running e2e tests as well as unit and component tests.\n  runner: \"local\",\n  //\n  // ==================\n  // Specify Test Files\n  // ==================\n  // Define which test specs should run. The pattern is relative to the directory\n  // of the configuration file being run.\n  //\n  // The specs are defined as an array of spec files (optionally using wildcards\n  // that will be expanded). The test for each spec file will be run in a separate\n  // worker process. In order to have a group of spec files run in the same worker\n  // process simply enclose them in an array within the specs array.\n  //\n  // If you are calling `wdio` from an NPM script (see https://docs.npmjs.com/cli/run-script),\n  // then the current working directory is where your `package.json` resides, so `wdio`\n  // will be called from there.\n  //\n  specs: [\"./tests/**\"],\n  // Patterns to exclude.\n  exclude: [\n    // 'path/to/excluded/files'\n  ],\n  //\n  // ============\n  // Capabilities\n  // ============\n  // Define your capabilities here. WebdriverIO can run multiple capabilities at the same\n  // time. Depending on the number of capabilities, WebdriverIO launches several test\n  // sessions. Within your capabilities you can overwrite the spec and exclude options in\n  // order to group specific specs to a specific capability.\n  //\n  // First, you can define how many instances should be started at the same time. Let's\n  // say you have 3 different capabilities (Chrome, Firefox, and Safari) and you have\n  // set maxInstances to 1; wdio will spawn 3 processes. Therefore, if you have 10 spec\n  // files and you set maxInstances to 10, all spec files will get tested at the same time\n  // and 30 processes will get spawned. The property handles how many capabilities\n  // from the same test should run tests.\n  //\n  maxInstances: 10,\n  //\n  // If you have trouble getting all important capabilities together, check out the\n  // Sauce Labs platform configurator - a great tool to configure your capabilities:\n  // https://saucelabs.com/platform/platform-configurator\n  //\n  capabilities: [\n    {\n      browserName: \"chrome\",\n      \"goog:chromeOptions\": {\n        args: [\"headless\", \"disable-gpu\"],\n      },\n    },\n  ],\n\n  //\n  // ===================\n  // Test Configurations\n  // ===================\n  // Define all options that are relevant for the WebdriverIO instance here\n  //\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  logLevel: \"info\",\n  //\n  // Set specific log levels per logger\n  // loggers:\n  // - webdriver, webdriverio\n  // - @wdio/browserstack-service, @wdio/devtools-service, @wdio/sauce-service\n  // - @wdio/mocha-framework, @wdio/jasmine-framework\n  // - @wdio/local-runner\n  // - @wdio/sumologic-reporter\n  // - @wdio/cli, @wdio/config, @wdio/utils\n  // Level of logging verbosity: trace | debug | info | warn | error | silent\n  // logLevels: {\n  //     webdriver: 'info',\n  //     '@wdio/appium-service': 'info'\n  // },\n  //\n  // If you only want to run your tests until a specific amount of tests have failed use\n  // bail (default is 0 - don't bail, run all tests).\n  bail: 0,\n  //\n  // Set a base URL in order to shorten url command calls. If your `url` parameter starts\n  // with `/`, the base url gets prepended, not including the path portion of your baseUrl.\n  // If your `url` parameter starts without a scheme or `/` (like `some/path`), the base url\n  // gets prepended directly.\n  baseUrl: \"http://www.google.com\",\n  //\n  // Default timeout for all waitFor* commands.\n  waitforTimeout: 10000,\n  //\n  // Default timeout in milliseconds for request\n  // if browser driver or grid doesn't send response\n  connectionRetryTimeout: 120000,\n  //\n  // Default request retries count\n  connectionRetryCount: 3,\n  //\n  // Test runner services\n  // Services take over a specific job you don't want to take care of. They enhance\n  // your test setup with almost no effort. Unlike plugins, they don't add new\n  // commands. Instead, they hook themselves up into the test process.\n\n  services: [\"devtools\"],\n\n  // Framework you want to run your specs with.\n  // The following are supported: Mocha, Jasmine, and Cucumber\n  // see also: https://webdriver.io/docs/frameworks\n  //\n  // Make sure you have the wdio adapter package for the specific framework installed\n  // before running any tests.\n  framework: \"mocha\",\n  //\n  // The number of times to retry the entire specfile when it fails as a whole\n  // specFileRetries: 1,\n  //\n  // Delay in seconds between the spec file retry attempts\n  // specFileRetriesDelay: 0,\n  //\n  // Whether or not retried spec files should be retried immediately or deferred to the end of the queue\n  // specFileRetriesDeferred: false,\n  //\n  // Test reporter for stdout.\n  // The only one supported by default is 'dot'\n  // see also: https://webdriver.io/docs/dot-reporter\n  reporters: [\"spec\"],\n\n  //\n  // Options to be passed to Mocha.\n  // See the full list at http://mochajs.org/\n  mochaOpts: {\n    ui: \"bdd\",\n    timeout: 60000,\n  },\n  //\n  // =====\n  // Hooks\n  // =====\n  // WebdriverIO provides several hooks you can use to interfere with the test process in order to enhance\n  // it and to build services around it. You can either apply a single function or an array of\n  // methods to it. If one of them returns with a promise, WebdriverIO will wait until that promise got\n  // resolved to continue.\n  /**\n   * Gets executed once before all workers get launched.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   */\n  // onPrepare: function (config, capabilities) {\n  // },\n  /**\n   * Gets executed before a worker process is spawned and can be used to initialise specific service\n   * for that worker as well as modify runtime environments in an async fashion.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {object} caps     object containing capabilities for session that will be spawn in the worker\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {object} args     object that will be merged with the main configuration once worker is initialized\n   * @param  {object} execArgv list of string arguments passed to the worker process\n   */\n  // onWorkerStart: function (cid, caps, specs, args, execArgv) {\n  // },\n  /**\n   * Gets executed just after a worker process has exited.\n   * @param  {string} cid      capability id (e.g 0-0)\n   * @param  {number} exitCode 0 - success, 1 - fail\n   * @param  {object} specs    specs to be run in the worker process\n   * @param  {number} retries  number of retries used\n   */\n  // onWorkerEnd: function (cid, exitCode, specs, retries) {\n  // },\n  /**\n   * Gets executed just before initialising the webdriver session and test framework. It allows you\n   * to manipulate configurations depending on the capability or spec.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that are to be run\n   * @param {string} cid worker id (e.g. 0-0)\n   */\n  // beforeSession: function (config, capabilities, specs, cid) {\n  // },\n  /**\n   * Gets executed before test execution begins. At this point you can access to all global\n   * variables like `browser`. It is the perfect place to define custom commands.\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs        List of spec file paths that are to be run\n   * @param {object}         browser      instance of created browser/device session\n   */\n  // before: function (capabilities, specs) {\n  // },\n  /**\n   * Runs before a WebdriverIO command gets executed.\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   */\n  // beforeCommand: function (commandName, args) {\n  // },\n  /**\n   * Hook that gets executed before the suite starts\n   * @param {object} suite suite details\n   */\n  // beforeSuite: function (suite) {\n  // },\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _before_ a hook within the suite starts (e.g. runs before calling\n   * beforeEach in Mocha)\n   */\n  // beforeHook: function (test, context) {\n  // },\n  /**\n   * Hook that gets executed _after_ a hook within the suite starts (e.g. runs after calling\n   * afterEach in Mocha)\n   */\n  // afterHook: function (test, context, { error, result, duration, passed, retries }) {\n  // },\n  /**\n   * Function to be executed after a test (in Mocha/Jasmine only)\n   * @param {object}  test             test object\n   * @param {object}  context          scope object the test was executed with\n   * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n   * @param {*}       result.result    return object of test function\n   * @param {number}  result.duration  duration of test\n   * @param {boolean} result.passed    true if test has passed, otherwise false\n   * @param {object}  result.retries   informations to spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n   */\n  // afterTest: function(test, context, { error, result, duration, passed, retries }) {\n  // },\n\n  /**\n   * Hook that gets executed after the suite has ended\n   * @param {object} suite suite details\n   */\n  // afterSuite: function (suite) {\n  // },\n  /**\n   * Runs after a WebdriverIO command gets executed\n   * @param {string} commandName hook command name\n   * @param {Array} args arguments that command would receive\n   * @param {number} result 0 - command success, 1 - command error\n   * @param {object} error error object if any\n   */\n  // afterCommand: function (commandName, args, result, error) {\n  // },\n  /**\n   * Gets executed after all tests are done. You still have access to all global variables from\n   * the test.\n   * @param {number} result 0 - test pass, 1 - test fail\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // after: function (result, capabilities, specs) {\n  // },\n  /**\n   * Gets executed right after terminating the webdriver session.\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {Array.<String>} specs List of spec file paths that ran\n   */\n  // afterSession: function (config, capabilities, specs) {\n  // },\n  /**\n   * Gets executed after all workers got shut down and the process is about to exit. An error\n   * thrown in the onComplete hook will result in the test run failing.\n   * @param {object} exitCode 0 - success, 1 - fail\n   * @param {object} config wdio configuration object\n   * @param {Array.<Object>} capabilities list of capabilities details\n   * @param {<Object>} results object containing test results\n   */\n  // onComplete: function(exitCode, config, capabilities, results) {\n  // },\n  /**\n   * Gets executed when a refresh happens.\n   * @param {string} oldSessionId session ID of the old session\n   * @param {string} newSessionId session ID of the new session\n   */\n  // onReload: function(oldSessionId, newSessionId) {\n  // }\n};\n"],"mappings":";;AAAAA,OAAO,CAACC,MAAM,GAAG;EACf;EACA;EACA;EACA;EACA;EACAC,MAAM,EAAE,OAAO;EACf;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,KAAK,EAAE,CAAC,YAAY,CAAC;EACrB;EACAC,OAAO,EAAE;IACP;EAAA,CACD;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,EAAE;EAChB;EACA;EACA;EACA;EACA;EACAC,YAAY,EAAE,CACZ;IACEC,WAAW,EAAE,QAAQ;IACrB,oBAAoB,EAAE;MACpBC,IAAI,EAAE,CAAC,UAAU,EAAE,aAAa;IAClC;EACF,CAAC,CACF;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,QAAQ,EAAE,MAAM;EAChB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAI,EAAE,CAAC;EACP;EACA;EACA;EACA;EACA;EACAC,OAAO,EAAE,uBAAuB;EAChC;EACA;EACAC,cAAc,EAAE,KAAK;EACrB;EACA;EACA;EACAC,sBAAsB,EAAE,MAAM;EAC9B;EACA;EACAC,oBAAoB,EAAE,CAAC;EACvB;EACA;EACA;EACA;EACA;;EAEAC,QAAQ,EAAE,CAAC,UAAU,CAAC;EAEtB;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,OAAO;EAClB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,SAAS,EAAE,CAAC,MAAM,CAAC;EAEnB;EACA;EACA;EACAC,SAAS,EAAE;IACTC,EAAE,EAAE,KAAK;IACTC,OAAO,EAAE;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;EACE;EACA;EACA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;;EAEA;AACF;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA;EACA;AACF;AACA;AACA;AACA;EACE;EACA;AACF,CAAC"}},"mtime":1696343662296},"{\"assumptions\":{},\"sourceRoot\":\"/Users/srdjadzogaz/Repos/test-performance-example/tests/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/srdjadzogaz/Repos/test-performance-example\",\"filename\":\"/Users/srdjadzogaz/Repos/test-performance-example/tests/perfTest.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"/Users/srdjadzogaz/Repos/test-performance-example\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.8:test":{"value":{"code":"\"use strict\";\n\nconst {\n  default: expect\n} = require(\"expect\");\ndescribe(\"Open devtools\", () => {\n  it(\"should load within performance budget\", async () => {\n    /**\n     * this page load will take a bit longer as the DevTools service will\n     * capture all metrics in the background\n     */\n    await browser.enablePerformanceAudits();\n    await browser.url(\"http://www.google.com\");\n    let metrics = await browser.getMetrics();\n    let score = await browser.getPerformanceScore();\n    expect(metrics.speedIndex).toBeLessThan(1900);\n    //expect(metrics.firstContentfulPaint).toBeLessThan(1000);\n    expect(metrics.firstMeaningfulPaint).toBeLessThan(2000);\n    expect(metrics.largestContentfulPaint).toBeLessThan(1000);\n    expect(metrics.interactive).toBeLessThan(10000);\n    //expect(metrics.timetoFirstByte).toBeLessThan(250);\n\n    /* Returns the Lighthouse Performance Score\n    which is a weighted mean of the following metrics: firstContentfulPaint, speedIndex,\n    largestContentfulPaint, cumulativeLayoutShift, totalBlockingTime, interactive, maxPotentialFID or cumulativeLayoutShift.\n    */\n    expect(score).toBeGreaterThanOrEqual(0.6);\n    console.log(metrics);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWZhdWx0IiwiZXhwZWN0IiwicmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJicm93c2VyIiwiZW5hYmxlUGVyZm9ybWFuY2VBdWRpdHMiLCJ1cmwiLCJtZXRyaWNzIiwiZ2V0TWV0cmljcyIsInNjb3JlIiwiZ2V0UGVyZm9ybWFuY2VTY29yZSIsInNwZWVkSW5kZXgiLCJ0b0JlTGVzc1RoYW4iLCJmaXJzdE1lYW5pbmdmdWxQYWludCIsImxhcmdlc3RDb250ZW50ZnVsUGFpbnQiLCJpbnRlcmFjdGl2ZSIsInRvQmVHcmVhdGVyVGhhbk9yRXF1YWwiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIvVXNlcnMvc3JkamFkem9nYXovUmVwb3MvdGVzdC1wZXJmb3JtYW5jZS1leGFtcGxlL3Rlc3RzLyIsInNvdXJjZXMiOlsicGVyZlRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBkZWZhdWx0OiBleHBlY3QgfSA9IHJlcXVpcmUoXCJleHBlY3RcIik7XG5cbmRlc2NyaWJlKFwiT3BlbiBkZXZ0b29sc1wiLCAoKSA9PiB7XG4gIGl0KFwic2hvdWxkIGxvYWQgd2l0aGluIHBlcmZvcm1hbmNlIGJ1ZGdldFwiLCBhc3luYyAoKSA9PiB7XG4gICAgLyoqXG4gICAgICogdGhpcyBwYWdlIGxvYWQgd2lsbCB0YWtlIGEgYml0IGxvbmdlciBhcyB0aGUgRGV2VG9vbHMgc2VydmljZSB3aWxsXG4gICAgICogY2FwdHVyZSBhbGwgbWV0cmljcyBpbiB0aGUgYmFja2dyb3VuZFxuICAgICAqL1xuICAgIGF3YWl0IGJyb3dzZXIuZW5hYmxlUGVyZm9ybWFuY2VBdWRpdHMoKTtcbiAgICBhd2FpdCBicm93c2VyLnVybChcImh0dHA6Ly93d3cuZ29vZ2xlLmNvbVwiKTtcblxuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgYnJvd3Nlci5nZXRNZXRyaWNzKCk7XG4gICAgbGV0IHNjb3JlID0gYXdhaXQgYnJvd3Nlci5nZXRQZXJmb3JtYW5jZVNjb3JlKCk7XG5cbiAgICBleHBlY3QobWV0cmljcy5zcGVlZEluZGV4KS50b0JlTGVzc1RoYW4oMTkwMCk7XG4gICAgLy9leHBlY3QobWV0cmljcy5maXJzdENvbnRlbnRmdWxQYWludCkudG9CZUxlc3NUaGFuKDEwMDApO1xuICAgIGV4cGVjdChtZXRyaWNzLmZpcnN0TWVhbmluZ2Z1bFBhaW50KS50b0JlTGVzc1RoYW4oMjAwMCk7XG4gICAgZXhwZWN0KG1ldHJpY3MubGFyZ2VzdENvbnRlbnRmdWxQYWludCkudG9CZUxlc3NUaGFuKDEwMDApO1xuICAgIGV4cGVjdChtZXRyaWNzLmludGVyYWN0aXZlKS50b0JlTGVzc1RoYW4oMTAwMDApO1xuICAgIC8vZXhwZWN0KG1ldHJpY3MudGltZXRvRmlyc3RCeXRlKS50b0JlTGVzc1RoYW4oMjUwKTtcblxuICAgIC8qIFJldHVybnMgdGhlIExpZ2h0aG91c2UgUGVyZm9ybWFuY2UgU2NvcmVcbiAgICB3aGljaCBpcyBhIHdlaWdodGVkIG1lYW4gb2YgdGhlIGZvbGxvd2luZyBtZXRyaWNzOiBmaXJzdENvbnRlbnRmdWxQYWludCwgc3BlZWRJbmRleCxcbiAgICBsYXJnZXN0Q29udGVudGZ1bFBhaW50LCBjdW11bGF0aXZlTGF5b3V0U2hpZnQsIHRvdGFsQmxvY2tpbmdUaW1lLCBpbnRlcmFjdGl2ZSwgbWF4UG90ZW50aWFsRklEIG9yIGN1bXVsYXRpdmVMYXlvdXRTaGlmdC5cbiAgICAqL1xuICAgIGV4cGVjdChzY29yZSkudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwLjYpO1xuICAgIGNvbnNvbGUubG9nKG1ldHJpY3MpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU07RUFBRUEsT0FBTyxFQUFFQztBQUFPLENBQUMsR0FBR0MsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUU3Q0MsUUFBUSxDQUFDLGVBQWUsRUFBRSxNQUFNO0VBQzlCQyxFQUFFLENBQUMsdUNBQXVDLEVBQUUsWUFBWTtJQUN0RDtBQUNKO0FBQ0E7QUFDQTtJQUNJLE1BQU1DLE9BQU8sQ0FBQ0MsdUJBQXVCLENBQUMsQ0FBQztJQUN2QyxNQUFNRCxPQUFPLENBQUNFLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQztJQUUxQyxJQUFJQyxPQUFPLEdBQUcsTUFBTUgsT0FBTyxDQUFDSSxVQUFVLENBQUMsQ0FBQztJQUN4QyxJQUFJQyxLQUFLLEdBQUcsTUFBTUwsT0FBTyxDQUFDTSxtQkFBbUIsQ0FBQyxDQUFDO0lBRS9DVixNQUFNLENBQUNPLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDLENBQUNDLFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDN0M7SUFDQVosTUFBTSxDQUFDTyxPQUFPLENBQUNNLG9CQUFvQixDQUFDLENBQUNELFlBQVksQ0FBQyxJQUFJLENBQUM7SUFDdkRaLE1BQU0sQ0FBQ08sT0FBTyxDQUFDTyxzQkFBc0IsQ0FBQyxDQUFDRixZQUFZLENBQUMsSUFBSSxDQUFDO0lBQ3pEWixNQUFNLENBQUNPLE9BQU8sQ0FBQ1EsV0FBVyxDQUFDLENBQUNILFlBQVksQ0FBQyxLQUFLLENBQUM7SUFDL0M7O0lBRUE7QUFDSjtBQUNBO0FBQ0E7SUFDSVosTUFBTSxDQUFDUyxLQUFLLENBQUMsQ0FBQ08sc0JBQXNCLENBQUMsR0FBRyxDQUFDO0lBQ3pDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ1gsT0FBTyxDQUFDO0VBQ3RCLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9","map":{"version":3,"names":["default","expect","require","describe","it","browser","enablePerformanceAudits","url","metrics","getMetrics","score","getPerformanceScore","speedIndex","toBeLessThan","firstMeaningfulPaint","largestContentfulPaint","interactive","toBeGreaterThanOrEqual","console","log"],"sourceRoot":"/Users/srdjadzogaz/Repos/test-performance-example/tests/","sources":["perfTest.js"],"sourcesContent":["const { default: expect } = require(\"expect\");\n\ndescribe(\"Open devtools\", () => {\n  it(\"should load within performance budget\", async () => {\n    /**\n     * this page load will take a bit longer as the DevTools service will\n     * capture all metrics in the background\n     */\n    await browser.enablePerformanceAudits();\n    await browser.url(\"http://www.google.com\");\n\n    let metrics = await browser.getMetrics();\n    let score = await browser.getPerformanceScore();\n\n    expect(metrics.speedIndex).toBeLessThan(1900);\n    //expect(metrics.firstContentfulPaint).toBeLessThan(1000);\n    expect(metrics.firstMeaningfulPaint).toBeLessThan(2000);\n    expect(metrics.largestContentfulPaint).toBeLessThan(1000);\n    expect(metrics.interactive).toBeLessThan(10000);\n    //expect(metrics.timetoFirstByte).toBeLessThan(250);\n\n    /* Returns the Lighthouse Performance Score\n    which is a weighted mean of the following metrics: firstContentfulPaint, speedIndex,\n    largestContentfulPaint, cumulativeLayoutShift, totalBlockingTime, interactive, maxPotentialFID or cumulativeLayoutShift.\n    */\n    expect(score).toBeGreaterThanOrEqual(0.6);\n    console.log(metrics);\n  });\n});\n"],"mappings":";;AAAA,MAAM;EAAEA,OAAO,EAAEC;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE7CC,QAAQ,CAAC,eAAe,EAAE,MAAM;EAC9BC,EAAE,CAAC,uCAAuC,EAAE,YAAY;IACtD;AACJ;AACA;AACA;IACI,MAAMC,OAAO,CAACC,uBAAuB,CAAC,CAAC;IACvC,MAAMD,OAAO,CAACE,GAAG,CAAC,uBAAuB,CAAC;IAE1C,IAAIC,OAAO,GAAG,MAAMH,OAAO,CAACI,UAAU,CAAC,CAAC;IACxC,IAAIC,KAAK,GAAG,MAAML,OAAO,CAACM,mBAAmB,CAAC,CAAC;IAE/CV,MAAM,CAACO,OAAO,CAACI,UAAU,CAAC,CAACC,YAAY,CAAC,IAAI,CAAC;IAC7C;IACAZ,MAAM,CAACO,OAAO,CAACM,oBAAoB,CAAC,CAACD,YAAY,CAAC,IAAI,CAAC;IACvDZ,MAAM,CAACO,OAAO,CAACO,sBAAsB,CAAC,CAACF,YAAY,CAAC,IAAI,CAAC;IACzDZ,MAAM,CAACO,OAAO,CAACQ,WAAW,CAAC,CAACH,YAAY,CAAC,KAAK,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;IACIZ,MAAM,CAACS,KAAK,CAAC,CAACO,sBAAsB,CAAC,GAAG,CAAC;IACzCC,OAAO,CAACC,GAAG,CAACX,OAAO,CAAC;EACtB,CAAC,CAAC;AACJ,CAAC,CAAC"}},"mtime":1696494522796}}